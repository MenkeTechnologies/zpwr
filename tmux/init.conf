# vim: set ft=tmux:

#{{{                    MARK:Bindings
#**************************************************************
bind-key L last-window
bind-key | split-window -h
bind-key - split-window -v

# unquoted \ broke in tmux v3.0
bind-key '\' split-window -h -c "#{pane_current_path}"
bind-key _ split-window -v -c "#{pane_current_path}"
bind-key + split-window -v -c "#{pane_current_path}" \; select-pane -l\; kill-pane
bind-key Y split-window -v -c "#{pane_current_path}" \; select-pane -l\; kill-pane
bind-key -T copy-mode-vi v send-keys -X begin-selection

bind-key -n M-Left select-pane -L
bind-key -n M-Right select-pane -R
bind-key -n M-Up select-pane -U
bind-key -n M-Down select-pane -D

bind-key -r h select-pane -L
bind-key -r l select-pane -R
bind-key -r k select-pane -U
bind-key -r j select-pane -D
# set some batch actions to keybindings
bind-key D source-file $ZPWR_TMUX/control-window.conf
bind-key F source-file $ZPWR_TMUX/four-panes.conf
bind-key E source-file $ZPWR_TMUX/fourVertical.conf
bind-key G source-file $ZPWR_TMUX/eight-panes.conf
bind-key O source-file $ZPWR_TMUX/sixteen-panes.conf
bind-key R source-file $ZPWR_TMUX/thirtytwo-panes-repl.conf
bind-key T source-file $ZPWR_TMUX/config-files.conf
bind-key M source-file $ZPWR_TMUX/learn.conf
bind-key r source-file $ZPWR_TMUX/init.conf \; display-message "Tmux Reloaded!"
bind-key x kill-pane
bind-key w choose-tree
bind-key P paste-buffer
bind-key S set-window-option synchronize-panes
# show pane numbers for 5 secs
bind-key q display-panes -d 5000
# rebind n and p for recursive, successive keypresses
bind-key -r n next-window
bind-key -r p previous-window
# unquoted { broke in tmux v3.0
bind-key -r '{' rotate-window
bind-key -r ( switch-client -p
bind-key -r ) switch-client -n

bind-key -n C-] switch-client -p
bind-key -n 'C-\' switch-client -n

bind-key -r H resize-pane -L 5
bind-key -r L resize-pane -R 5
bind-key -r J resize-pane -D 5
bind-key -r K resize-pane -U 5
#}}}***********************************************************

#{{{                    MARK:Options
#**************************************************************
# timeout for repeat keybindings
set-option -g repeat-time 3000

set-window-option -g monitor-activity off
set-window-option -g pane-active-border-style fg=colour99,bg=black
set-window-option -g pane-border-style fg=blue,bg=black

set-option -g message-style fg=white,bold,bg=blue
set-option -g mode-style fg=white,bold,bg=blue

# scrollback to 30,000 lines
#set-option -g history-limit 30000

# automatically renumber windows
set-option -g renumber-windows on

# display messages for 2 seconds
set-option -g display-time 2000

# allow vi keybindings in tmux command mode :
set-option -g status-keys vi

#bind-key _ select-layout even-vertical
#bind-key = select-layout even-horizontal
#set-window-option -g window-status-current-bg yellow

# Use vim keybindings in copy mode
set-window-option -g mode-keys vi

# reduce lag between pefix and command
set-option -s escape-time 1

# loud or quiet?
#set-option -g visual-activity on
#set-option -g visual-bell off
#set-option -g visual-silence off
#set-option -g bell-action none

set-option -g @plugin 'tmux-plugins/tpm'
set-option -g @plugin 'tmux-plugins/tmux-sensible'
set-option -g @plugin 'tmux-plugins/tmux-resurrect'
set-option -g @plugin 'tmux-plugins/tmpux-prefix-highlight'
set-option -g @plugin 'tmux-plugins/tmux-continuum'
set-option -g @plugin 'tmux-plugins/tmux-battery'
set-option -g @plugin 'MenkeTechnologies/tmux-thumbs'

set -g @thumbs-osc52 1
set -g @thumbs-upcase-command 'tmux set-buffer {} &>/dev/null'
set -g @thumbs-command 'tmux set-buffer {} &>/dev/null && tmux paste-buffer &>/dev/null'
set -g @thumbs-regexp-1 '[a-z]+@[a-z]+.com' # Match emails
set -g @thumbs-regexp-2 '[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:' # Match MAC addresses
set -g @thumbs-regexp-3 '(?:[0-9]{1,3}\.){3}[0-9]{1,3}' #ipv4

set-option -g @resurrect-processes ':all:'

#set-option -g @continuum-restore 'on'
#set-option -g @resurrect-capture-pane-contents 'on'
#set-option -g @resurrect-strategy-vim 'session'

set-option -g default-terminal "screen-256color"
set-option -sa terminal-overrides ',xterm-256color:RGB'

set-option -g default-shell $SHELL
#}}}***********************************************************

#{{{                    MARK:Cross OS and tmux version
#**************************************************************
# macOS and linux have different powerline locations etc
if-shell "uname -s | grep -iq Darwin" "source-file $ZPWR_TMUX/tmux-mac.conf" "source-file $ZPWR_TMUX/tmux-linux.conf"

if-shell "uname -r | grep -iq icrosoft" "source-file $ZPWR_TMUX/tmux-wsl.conf" ""

# need to check tmux version due to backwards incompatible mouse configuration

# regen the cross OS sym link
if-shell "[ ! -d ~/.tmux/powerline ]" "run-shell \"ln -sf $(sudo python3 -m pip show powerline-status | \grep --color=always '^Location' | awk '{print $2}')/powerline $HOME/.tmux/powerline\"" ""

# log if sym link already exists
if-shell "[ -d ~/.tmux/powerline ] && tmux has-session" "display-message 'Powerline link exists!'" ""

# log if sym link does not exists
if-shell "[ ! -d ~/.tmux/powerline ] && tmux has-session" "display-message 'Did not regen powerline link!'" ""

# source conf for tmux version <= 2.1 or > 2.1
if-shell "[ `tmux -V | awk '{print ($2 >= 2.1)}'` -eq 1 ]" 'source $ZPWR_TMUX/tmux_ge_21.conf' 'source $ZPWR_TMUX/tmux_lt_21.conf'

# source conf for tmux version >= 2.9 or < 2.9
if-shell "[ `tmux -V | awk '{print ($2 >= 2.9)}'` -eq 1 ]" 'source  $ZPWR_TMUX/tmux_ge_29.conf' 'source $ZPWR_TMUX/tmux_lt_29.conf'

# set tmux status bar to top on WSL
if-shell "uname -r | grep -iq icrosoft" 'set -g status-position top' 'set -g status-position bottom'

#{{{                    MARK:Bindings
#**************************************************************
bind-key L last-window
bind-key | split-window -h
bind-key - split-window -v

# unquoted \ broke in tmux v3.0
bind-key '\' split-window -h -c "#{pane_current_path}"
bind-key _ split-window -v -c "#{pane_current_path}"
bind-key + split-window -v -c "#{pane_current_path}" \; select-pane -l\; kill-pane
bind-key Y split-window -v -c "#{pane_current_path}" \; select-pane -l\; kill-pane
bind-key -T copy-mode-vi v send-keys -X begin-selection

bind-key -n M-Left select-pane -L
bind-key -n M-Right select-pane -R
bind-key -n M-Up select-pane -U
bind-key -n M-Down select-pane -D

bind-key -r h select-pane -L
bind-key -r l select-pane -R
bind-key -r k select-pane -U
bind-key -r j select-pane -D
# set some batch actions to keybindings
bind-key D source-file $ZPWR_TMUX/control-window.conf
bind-key F source-file $ZPWR_TMUX/four-panes.conf
bind-key E source-file $ZPWR_TMUX/fourVertical.conf
bind-key G source-file $ZPWR_TMUX/eight-panes.conf
bind-key O source-file $ZPWR_TMUX/sixteen-panes.conf
bind-key R source-file $ZPWR_TMUX/thirtytwo-panes-repl.conf
bind-key T source-file $ZPWR_TMUX/config-files.conf
bind-key M source-file $ZPWR_TMUX/learn.conf
bind-key r source-file ~/.tmux.conf \; display-message "Tmux Reloaded!"
bind-key x kill-pane
bind-key w choose-tree
bind-key P paste-buffer
bind-key S set-window-option synchronize-panes
# show pane numbers for 5 secs
bind-key q display-panes -d 5000
# rebind n and p for recursive, successive keypresses
bind-key -r n next-window
bind-key -r p previous-window
# unquoted { broke in tmux v3.0
bind-key -r '{' rotate-window
bind-key -r ( switch-client -p
bind-key -r ) switch-client -n

bind-key -n C-] switch-client -p
bind-key -n 'C-\' switch-client -n

bind-key -r H resize-pane -L 5
bind-key -r L resize-pane -R 5
bind-key -r J resize-pane -D 5
bind-key -r K resize-pane -U 5
#}}}***********************************************************

#{{{                    MARK:Options
#**************************************************************
# timeout for repeat keybindings
set-option -g repeat-time 3000

set-window-option -g monitor-activity off
set-window-option -g pane-active-border-style fg=colour99,bg=black
set-window-option -g pane-border-style fg=blue,bg=black

set-option -g message-style fg=white,bold,bg=blue
set-option -g mode-style fg=white,bold,bg=blue

# scrollback to 30,000 lines
#set-option -g history-limit 30000

# automatically renumber windows
set-option -g renumber-windows on

# display messages for 2 seconds
set-option -g display-time 2000

# allow vi keybindings in tmux command mode :
set-option -g status-keys vi

#bind-key _ select-layout even-vertical
#bind-key = select-layout even-horizontal
#set-window-option -g window-status-current-bg yellow

# Use vim keybindings in copy mode
set-window-option -g mode-keys vi

# reduce lag between pefix and command
set-option -s escape-time 1

# loud or quiet?
#set-option -g visual-activity on
#set-option -g visual-bell off
#set-option -g visual-silence off
#set-option -g bell-action none

set-option -g @plugin 'tmux-plugins/tpm'
set-option -g @plugin 'tmux-plugins/tmux-sensible'
set-option -g @plugin 'tmux-plugins/tmux-resurrect'
set-option -g @plugin 'tmux-plugins/tmpux-prefix-highlight'
set-option -g @plugin 'tmux-plugins/tmux-continuum'
set-option -g @plugin 'tmux-plugins/tmux-battery'
set-option -g @plugin 'MenkeTechnologies/tmux-thumbs'

set -g @thumbs-osc52 1
set -g @thumbs-upcase-command 'tmux set-buffer {} &>/dev/null'
set -g @thumbs-command 'tmux set-buffer {} &>/dev/null && tmux paste-buffer &>/dev/null'
set -g @thumbs-regexp-1 '[a-z]+@[a-z]+.com' # Match emails
set -g @thumbs-regexp-2 '[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:' # Match MAC addresses
set -g @thumbs-regexp-3 '(?:[0-9]{1,3}\.){3}[0-9]{1,3}' #ipv4

set-option -g @resurrect-processes ':all:'

#set-option -g @continuum-restore 'on'
#set-option -g @resurrect-capture-pane-contents 'on'
#set-option -g @resurrect-strategy-vim 'session'

set-option -g default-terminal "screen-256color"
set-option -sa terminal-overrides ',xterm-256color:RGB'

set-option -g default-shell $SHELL
#}}}***********************************************************

#{{{                    MARK:Cross OS and tmux version
#**************************************************************
# macOS and linux have different powerline locations etc
if-shell "uname -s | grep -iq Darwin" "source-file $ZPWR_TMUX/tmux-mac.conf" "source-file $ZPWR_TMUX/tmux-linux.conf"

if-shell "uname -r | grep -iq icrosoft" "source-file $ZPWR_TMUX/tmux-wsl.conf" ''

# need to check tmux version due to backwards incompatible mouse configuration

# regen the cross OS sym link
if-shell "[ ! -d ~/.tmux/powerline ]" "run-shell \"ln -sf $(sudo python3 -m pip show powerline-status | \grep --color=always '^Location' | awk '{print $2}')/powerline $HOME/.tmux/powerline\"" ""

# log if sym link already exists
if-shell "[ -d ~/.tmux/powerline ] && tmux has-session" "display-message 'Powerline link exists!'" ""

# log if sym link does not exists
if-shell "[ ! -d ~/.tmux/powerline ] && tmux has-session" "display-message 'Did not regen powerline link!'" ""

# source conf for tmux version <= 2.1 or > 2.1
if-shell "[ `tmux -V | awk '{print ($2 >= 2.1)}'` -eq 1 ]" 'source $ZPWR_TMUX/tmux_ge_21.conf' 'source $ZPWR_TMUX/tmux_lt_21.conf'

# source conf for tmux version >= 2.9 or < 2.9
if-shell "[ `tmux -V | awk '{print ($2 >= 2.9)}'` -eq 1 ]" 'source  $ZPWR_TMUX/tmux_ge_29.conf' 'source $ZPWR_TMUX/tmux_lt_29.conf'

# set tmux status bar to top on WSL
if-shell "uname -r | grep -iq icrosoft" 'set -g status-position top' 'set -g status-position bottom'
