# -*- mode: sh -*-
# vim: set ft=sh:
function zpwrAttachSetup() {

    emulate -L zsh
    setopt nullglob

    if [[ -z "$TMUX" ]] && [[ -n $SSH_CONNECTION ]]; then

        mobile=true
        if [[ -f "$HOME/.ssh/authorized_keys" ]]; then
            cat "$HOME/.ssh/authorized_keys" |
                command grep "$ZPWR_GITHUB_ACCOUNT" > "$ZPWR_TEMPFILE"

            case $distroName in
                (debian|raspbian|kali|ubuntu|parrot)
                    out="$(cat /dev/null | sudo env grep -a 'Accepted publickey for' /var/log/auth.log* | command grep -av sudo | tail -1)"
                    key="$(ssh-keygen -l -f "$ZPWR_TEMPFILE" 2>/dev/null | awk '{print $2}')"
                    ;;
                (centos|rhel)
                    out="$(tail /var/log/messages)"
                    ;;
                (*suse*|arch|manjaro*)
                    out="$(sudo journalctl -u sshd.service | command grep 'Accepted publickey' | tail -1)"
                    key="$(ssh-keygen -l -f "$ZPWR_TEMPFILE" 2>/dev/null | awk '{print $2}' | awk -F: '{print $2}')"
                    ;;
                (fedora)
                    out="$(sudo cat /var/log/secure | command grep -a 'Accepted publickey' | tail -1)"
                    key="$(ssh-keygen -l -f "$ZPWR_TEMPFILE" 2>/dev/null | awk '{print $2}' | awk -F: '{print $2}')"
                    ;;
                (*) :
                    ;;
            esac
            logg "searching for '$key' in '$out'"
            [[ "$out" == *"$key"* ]] && mobile=false
            command rm "$ZPWR_TEMPFILE"
        else
            logg "$HOME/.ssh/authorized_keys does not exist so NO attach"
        fi

        if [[ $mobile == "false" ]]; then
            logg "found '$key' so desktop"
            num_con="$(command ps -ef |command perl -ne 'print if /\bsshd\b/ and /\bpts\b/ and ! /\bperl\b/' | wc -l)"
            logg "num connections: '$num_con'"
            if (( $num_con <= 1 )); then
                logg "no tmux clients"
                {
                    out="$(tmux ls 2>&1)"
                    ret=$?
                    logg "tmux ls = ret: '$ret', out: '$out'"
                    if [[ $ret == 0 ]]; then
                        logg "attaching to existing"
                        logg command tmux attach
                        command tmux attach
                        ret=$?
                        logg "tmux attach = ret: '$ret'"
                    else
                        logg "creating new session"
                        logg tmux new-session \; \
                        source-file "$ZPWR_TMUX/control-window"
                        tmux new-session \; \
                        source-file "$ZPWR_TMUX/control-window"
                    fi
                } &> /dev/null
            else
                logg "clients so NO attach"
            fi
        else
            logg "not desktop so NO attach"
        fi
    fi
}
