# -*- mode: sh -*-
# vim: set ft=sh:

function zpwrAcceptLine () {

    builtin emulate -L zsh

    local pane commandsThatModifyFiles regex mywords line command cmd out acceptAliases args grc_cmd

    if ! [[ $(zpwrExpandAliases $BUFFER 2>/dev/null) = zc* ]]; then
        ZPWR_CONVEY_NAME="TTY:${TTY} PID:${$} CMD:$BUFFER PWD:${PWD} DATE:$(date)"
        zc-rename $ZPWR_CONVEY_NAME &>/dev/null
        ZPWR_CONVEY_LAST_CMD=$BUFFER
    else
        if [[ -z $ZPWR_CONVEY_LAST_CMD ]]; then
            ZPWR_CONVEY_LAST_CMD="-zsh $-"
        fi

        ZPWR_CONVEY_NAME="TTY:${TTY} PID:${$} CMD: $ZPWR_CONVEY_LAST_CMD PWD:${PWD} DATE:$(date)"
        zc-rename $ZPWR_CONVEY_NAME &>/dev/null
    fi

    ZPWR_WILL_CLEAR=false
    if [[ $ZPWR_SEND_KEYS_FULL == false ]]; then
        zpwrKeyClear
    else
        if ! [[ $BUFFER == *zpwrStopSend* ]]; then
            for pane in ${(Az)${(s@,@)ZPWR_SEND_KEYS_PANE}}; do
                tmux send-keys -t $pane "C-m"
            done
        else
            for pane in ${(Az)${(s@,@)ZPWR_SEND_KEYS_PANE}}; do
                tmux send-keys -t $pane "C-u"
            done
        fi
    fi

    #do we want to clear the screen and run ls after we exec the current line?

    commandsThatModifyFiles=(rm mv cp mkdir ln chown chmod touch unlink srm md rmdir chflags chgrp git\ reset git\ clone gcl dot_clean)

    zpwrExpandParseWords "$LBUFFER"

    if [[ "${(j@ @)ZPWR_EXPAND_WORDS_LPARTITION}" =~ ${ZPWR_VARS[continueFirstPositionRegexNoZpwr]} ]]; then

        local cmdstr=${(QL)match[-1]}
        mywords=( ${(z)cmdstr} )

        for command in ${commandsThatModifyFiles[@]}; do
            # match touch t
            # NOT touchtest t

            if [[ ${cmdstr} == ${command}* ]]; then
                ZPWR_WILL_CLEAR=true
                zpwrLogDebug "found '$command' in '$BUFFER' with matches '$match'"
                break
            fi
        done

        #so sudo -E env ping uses grc overalias of ping
        if zpwrCommandExists grc; then

            mywords=( ${(QLz)match[-1]} )
            cmd=${mywords[1]}
            args=( "${mywords[2,-1]}" )

            if [[ $match[12] =~ sudo ]] || [[ $match[21] =~ env ]]; then

                # sudo =iftop fails so remove =
                cmd=${cmd#=}
                out="$(alias -- $cmd)"
                if [[ "$out" == *grc* ]]; then
                    grc_cmd="$(eval echo "${out#*=}")"
                    print -srn -- "$BUFFER"
                    BUFFER="sudo -E env \"PATH=$PATH\" $grc_cmd ${args[@]}"
                    echo
                    eval "$BUFFER"
                    BUFFER=""
                    zle .accept-line
                    return 0
                fi
            fi
        fi
    fi


    # prevent global alias in first position from expanding
    if [[ -z "$ZPWR_GLOBAL_ALIAS_PREFIX" ]]; then
        [[ -z "$BUFFER" ]] && zle .accept-line && return 0
        if [[ -n $(alias -g $mywords[1]) ]];then
            acceptAliases="$(cat $ZPWR_LOCAL/.common_aliases)"
            line="$(print -r -- $acceptAliases | perl -ne 'print $1 if m{\Q'$mywords[1]'\E=(.*)}')"
            if [[ -z $line ]];then
                # function
                BUFFER="\\$mywords"
            else
                # non global alias
                print -- "$line" | grep -F "'" && \
                    BUFFER="${line:1:-1} $mywords[2,$]" ||
                    BUFFER="$line $mywords[2,$]"
            fi
        fi
    fi


    if [[ $ZPWR_EXPAND_PRE_EXEC == true ]]; then
        CURSOR=${#BUFFER}
        zpwrExpandSupernaturalSpace "${ZPWR_VARS[ENTER_KEY]}"
    fi

    zle .accept-line
    # leaky $ZPWR_DEFAULT_OMZ_THEME theme so reset ANSI escape sequences
    printf "\x1b[0m"
}

zpwrAcceptLine "$@"
