# -*- mode: sh -*-
# vim: set ft=sh:
function bindZpwrVerbs(){

        #{{{                    MARK:ZPWR Compsys Functions
#**************************************************************
    local cnt
    # get zpwr verbs
    source "$ZPWR_SCRIPTS/zpwr.zsh"

    unset zpwrSubcommandsAry zpwrForgitVerbs zpwrGitVerbs zpwrSearchVerbs zpwrCleanVerbs zpwrEmacsVerbs zpwrVimVerbs zpwrCdVerbs zpwrUpdateVerbs zpwrLearnVerbs zpwrTravisVerbs zpwrRegenVerbs zpwrZVerbs zpwrMiscVerbs 
    declare -agU zpwrSubcommandsAry zpwrForgitVerbs zpwrGitVerbs zpwrSearchVerbs zpwrCleanVerbs zpwrEmacsVerbs zpwrVimVerbs zpwrCdVerbs zpwrUpdateVerbs zpwrLearnVerbs zpwrTravisVerbs zpwrRegenVerbs zpwrZVerbs zpwrMiscVerbs 

    for k v in ${(kv)ZPWR_VERBS[@]};do
        case $k in
            forgit*)
                zpwrForgitVerbs+=("$k:$v")
                ;;
            vim*)
                zpwrVimVerbs+=("$k:$v")
                ;;
            emacs*)
                zpwrEmacsVerbs+=("$k:$v")
                ;;
            regen*)
                zpwrRegenVerbs+=("$k:$v")
                ;;
            clean*)
                zpwrCleanVerbs+=("$k:$v")
                ;;
            git*)
                zpwrGitVerbs+=("$k:$v")
                ;;
            travis*)
                zpwrTravisVerbs+=("$k:$v")
                ;;
            learn*|searchl*)
                zpwrLearnVerbs+=("$k:$v")
                ;;
            env*|*search)
                zpwrSearchVerbs+=("$k:$v")
                ;;
            update*)
                zpwrUpdateVerbs+=("$k:$v")
                ;;
            cd*|*cd|home*)
                zpwrCdVerbs+=("$k:$v")
                ;;
            *)
                zpwrMiscVerbs+=("$k:$v")
                ;;
        esac

        zpwrSubcommandsAry+="$k:$v"
    done

    ZPWR_VARS[zpwrSubcommandsAry]=zpwrSubcommandsAry
#}}}***********************************************************
}

bindZpwrVerbs "$@"
