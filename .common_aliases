,,='execpy amazonSearch.py'
-='cd -'
1='cd -'
10='cd -10'
11='cd -11'
12='cd -12'
13='cd -13'
14='cd -14'
15='cd -15'
16='cd -16'
17='cd -17'
18='cd -18'
19='cd -19'
2='cd -2'
3='cd -3'
4='cd -4'
5='cd -5'
6='cd -6'
7='cd -7'
8='cd -8'
9='cd -9'
MenkeTechnologies='openmygh MenkeTechnologies'
_='sudo '
_complete=_bash_comp
_expand=_bash_expand
a='cd /Users/wizard'
afind='ack -il'
allRebase='git rebase -i $(git rev-list --max-parents=0 HEAD)'
ap='cd /Applications'
apz='brew update && brew outdated && brew upgrade && brew cleanup; brew cu -ay; u8'
asg='cd $HOME/AndroidStudioProjects'
ba=bash
bcubc='brew cask reinstall $(brew cask outdated) && brew cleanup'
bcubo='brew update && brew cask outdated'
beats='sudo tail -f /var/log/*beat/* | ccze'
bk='git clean -dff && git reset --hard HEAD && git clean -dff'
bl='brew link --force --overwrite'
bluef='source $ZPWR_SCRIPTS/blueText.sh'
brake='noglob bundle exec rake'
brc='vim -S ~/.vim/sessions/aliases.vim + /Users/wizard/.zpwr/local/.shell_aliases_functions.sh; source /Users/wizard/.zpwr/local/.shell_aliases_functions.sh; bash /Users/wizard/.zpwr/scripts/backupBashConfig.sh 2> /dev/null'
brewp='brew pin'
brews='brew list -1'
brewsp='brew list --pinned'
bsaver='nohup /System/Library/Frameworks/ScreenSaver.framework/Resources/ScreenSaverEngine.app/Contents/MacOS/ScreenSaverEngine -background > /dev/null &'
bubc='brew upgrade && brew cleanup'
bubo='brew update && brew outdated'
bubu='bubo && bubc'
ca='cat -n'
cc='grc --colour=on cc'
ccat=colorize_cat
cfp='cf "$(clippaste)"'
cfpc='cfp | clipcopy'
cg='cd $HOME/ClionProjects'
cl=clear
cless=colorize_less
co='bash /Users/wizard/.zpwr/scripts/macOnly/commandToColors.sh'
cpan='rlwrap cpan'
cpu='top -o cpu'
ct='bash /Users/wizard/.zpwr/scripts/createTextFile.sh'
curl='curl -fsSL'
d='cd /Users/wizard/Desktop'
da=detachall
dcb='docker-compose build'
dcdn='docker-compose down'
dce='docker-compose exec'
dcl='docker-compose logs'
dclf='docker-compose logs -f'
dco=docker-compose
dcps='docker-compose ps'
dcpull='docker-compose pull'
dcr='docker-compose run'
dcrestart='docker-compose restart'
dcrm='docker-compose rm'
dcstart='docker-compose start'
dcstop='docker-compose stop'
dcup='docker-compose up'
dcupd='docker-compose up -d'
de='cd /dev'
deleteTab='sed '\''/^[\x20\x09]*$/d'\'
devlog='tail -f log/development.log'
df='grc --colour=on df'
diff='grc --colour=on diff'
dig='grc --colour=on dig'
dirs='dirs -v'
dl='cd /Users/wizard/Downloads'
docu='cd /Users/wizard/Documents'
e='cd /etc'
egrep='egrep --color=always'
es=se
exa='command exa --git -il -F -H --extended --color-scale -g -a --colour=always'
fga=forgit::add
fgcf=forgit::restore
fgclean=forgit::clean
fgd=forgit::diff
fgi=forgit::ignore
fglo=forgit::log
fgrh=forgit::reset::head
fgss=forgit::stash::show
fh='f !$'
fp='cd /Users/wizard/forkedRepos'
fsh-alias=fast-theme
g=git
ga='git add'
gaa='git add --all'
gac='git add . && git commit -m'
gacp='git add . && git commit -m "" && git push'
gap='git apply'
gapa='git add --patch'
gau='git add --update'
gav='git add --verbose'
gb='git branch'
gbD='git branch -D'
gba='git branch -a'
gbd='git branch -d'
gbda='git branch --no-color --merged | command grep -vE "^(\+|\*|\s*(master|develop|dev)\s*$)" | command xargs -n 1 git branch -d'
gbl='git blame -b -w'
gbnm='git branch --no-merged'
gbr='git branch --remote'
gbs='git bisect'
gbsb='git bisect bad'
gbsg='git bisect good'
gbsr='git bisect reset'
gbss='git bisect start'
gbv='git branch -a -vv'
gc='git commit -v'
'gc!'='git commit -v --amend'
gca='git commit -v -a'
'gca!'='git commit -v -a --amend'
gcam='git commit -a -m'
'gcan!'='git commit -v -a --no-edit --amend'
'gcans!'='git commit -v -a -s --no-edit --amend'
gcb='git checkout -b'
gcc='grc --colour=on gcc'
gcd='git checkout develop'
gcf='git config --list'
gcl='git clone --recurse-submodules'
gclean='git clean -id'
gcm='git checkout master'
gcmsg='git commit -m'
'gcn!'='git commit -v --no-edit --amend'
gco='git checkout'
gcount='git shortlog -sn'
gcp='git cherry-pick'
gcpa='git cherry-pick --abort'
gcpc='git cherry-pick --continue'
gcs='git commit -S'
gcsm='git commit -s -m'
gd='git diff'
gdca='git diff --cached'
gdct='git describe --tags $(git rev-list --tags --max-count=1)'
gdcw='git diff --cached --word-diff'
gdh='git diff -w HEAD'
gds='git diff --staged'
gdt='git diff-tree --no-commit-id --name-only -r'
gdw='git diff --word-diff'
gemb='gem build *.gemspec'
gemp='gem push *.gem'
gf='git fetch'
gfa='git fetch --all --prune'
gffo='git fetch --force origin'
gffod='git fetch --force origin dev'
gffom='git fetch --force origin master'
gffu='git fetch --force upstream'
gffud='git fetch --force upstream dev'
gffum='git fetch --force upstream master'
gfg='git ls-files | grep'
gfo='git fetch origin'
gfod='git fetch origin dev'
gfom='git fetch origin master'
gfu='git fetch upstream'
gfud='git fetch upstream dev'
gfum='git fetch upstream master'
gg='git gui citool'
gga='git gui citool --amend'
ggpull='git pull origin "$(git_current_branch)"'
ggpur=ggu
ggpush='git push origin "$(git_current_branch)"'
ggsup='git branch --set-upstream-to=origin/$(git_current_branch)'
gh=openmygh
ghh='git help'
gignore='git update-index --assume-unchanged'
gignored='git ls-files -v | grep "^[[:lower:]]"'
gin='gem install'
git=hub
git-svn-dcommit-push='git svn dcommit && git push github master:svntrunk'
gitgo='$ZPWR_SCRIPTS/gitgo.sh'
gj='git pull --rebase --autostash -v'
gk='\gitk --all --branches'
gke='\gitk --all $(git log -g --pretty=%h)'
gl='git pull'
gla='git log --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset" --stat -p '
glaa='git log --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset" --stat -p --all'
glf='git pull --force'
glfo='git pull --force origin'
glfod='git pull --force origin dev'
glfom='git pull --force origin master'
glfu='git pull --force upstream'
glfud='git pull --force upstream dev'
glfum='git pull --force upstream master'
glg='git log --stat'
glgg='git log --graph'
glgga='git log --graph --decorate --all'
glgm='git log --graph --max-count=10'
glgp='git log --stat -p'
gli='gem list'
glo='git log --oneline --decorate'
glod='git log --graph --pretty='\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset'\'
glods='git log --graph --pretty='\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset'\'' --date=short'
glog='git log --oneline --decorate --graph'
gloga='git log --oneline --decorate --graph --all'
glol='git log --graph --pretty='\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\'
glola='git log --graph --pretty='\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\'' --all'
glols='git log --graph --pretty='\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\'' --stat'
glom='git pull origin master'
glp=_git_log_prettily
glu='git pull upstream'
glud='git pull upstream dev'
glum='git pull upstream master'
glz='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset" --stat -p'
glzz='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset" --stat -p --all'
gm='git merge'
gma='git merge --abort'
gmom='git merge origin/master'
gmt='git mergetool --no-prompt'
gmtvim='git mergetool --no-prompt --tool=vimdiff'
gmum='git merge upstream/master'
gob='go build'
goc='go clean'
god='go doc'
gof='go fmt'
gofa='go fmt ./...'
gog='go get'
goi='go install'
gol='go list'
gom='go mod'
gop='cd $GOPATH'
gopb='cd $GOPATH/bin'
gops='cd $GOPATH/src'
gor='go run'
got='go test'
gov='go vet'
gp='git push'
gpd='git push --dry-run'
gpf='git push --force-with-lease'
'gpf!'='git push --force'
gpfo='git push --force origin'
gpfoat='git push -f origin --all && git push -f origin --tags'
gpfod='git push --force origin dev'
gpfom='git push --force origin master:master'
gpfu='git push --force upstream'
gpfud='git push --force upstream dev'
gpfum='git push --force upstream master:master'
gpo='git push origin'
gpoat='git push origin --all && git push origin --tags'
gpod='git push origin dev'
gpom='git push origin master:master'
gpristine='git reset --hard && git clean -dfx'
gpsup='git push --set-upstream origin $(git_current_branch)'
gpu='git push upstream'
gpud='git push upstream dev'
gpum='git push upstream master:master'
gpv='git push -v'
gr='git remote'
gra='git remote add'
gradle=gradle-or-gradlew
grb='git rebase'
grba='git rebase --abort'
grbc='git rebase --continue'
grbd='git rebase develop'
grbi='git rebase -i'
grbm='git rebase master'
grbs='git rebase --skip'
grep='grep --color=always'
grev='git revert'
grh='git reset'
grhh='git reset --hard'
grhm='git reset --mixed'
grhs='git reset --soft'
grm='git rm'
grmc='git rm --cached'
grmv='git remote rename'
grod='git reset --hard origin/dev'
groh='git reset origin/$(git_current_branch) --hard'
grom='git reset --hard origin/master'
grrm='git remote remove'
grs='git restore'
grset='git remote set-url'
grss='git restore --source'
grt='cd "$(git rev-parse --show-toplevel || echo .)"'
gru='git reset --'
grud='git reset --hard upstream/dev'
grum='git reset --hard upstream/master'
grup='git remote update'
grv='git remote -v'
gs='git difftool -y -x '\''printf "\x1b[1;4m$REMOTE\x1b[0m\x0a";sdiff --expand-tabs -w '\''$COLUMNS '
gsb='git status -sb'
gsd='git svn dcommit'
gsh='git show'
gsi='git submodule init'
gsps='git show --pretty=short --show-signature'
gsr='git svn rebase'
gss='git status -s'
gst='git status'
gsta='git stash push'
gstaa='git stash apply'
gstall='git stash --all'
gstc='git stash clear'
gstd='git stash drop'
gstl='git stash list'
gstp='git stash pop'
gsts='git stash show --text'
gsu='git submodule update'
gsw='git switch'
gswc='git switch -c'
gtl='gtl(){ git tag --sort=-v:refname -n -l "${1}*" }; noglob gtl'
gts='git tag -s'
gtv='git tag | sort -V'
gun='gem uninstall'
gunignore='git update-index --no-assume-unchanged'
gunwip='git log -n 1 | grep -q -c "\-\-wip\-\-" && git reset HEAD~1'
gup='git pull --rebase'
gupa='git pull --rebase --autostash'
gupav='git pull --rebase --autostash -v'
gupv='git pull --rebase -v'
gwch='git whatchanged -p --abbrev-commit --pretty=medium'
gwip='git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit --no-verify --no-gpg-sign -m "--wip-- [skip ci]"'
h='cd /usr/local'
he='hexedit -l 16'
hidefiles='defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder'
history='omz_history -f'
ic='idea create'
ifconfig='grc --colour=on -c "$HOME/conf.ifconfig" ifconfig'
ig='cd $HOME/IdeaProjects'
il='idea list'
inst='bash /Users/wizard/.zpwr/scripts/tgzLocalInstaller.sh'
ipa='command ifconfig | perl -lane '\''do {print $F[1] =~ s/addr//r;exit0} if /inet\s/ and !/127/'\'
jh=jhipster
jhappdown='docker-compose -f src/main/docker/app.yml down'
jhapplogs='docker-compose -f src/main/docker/app.yml logs --follow'
jhappstop='docker-compose -f src/main/docker/app.yml stop'
jhappup='docker-compose -f src/main/docker/app.yml up -d'
jhaws='jhipster aws'
jhcassandradown='docker-compose -f src/main/docker/cassandra.yml down'
jhcassandralogs='docker-compose -f src/main/docker/cassandra.yml logs --follow'
jhcassandrastop='docker-compose -f src/main/docker/cassandra.yml stop'
jhcassandraup='docker-compose -f src/main/docker/cassandra.yml up -d'
jhcf='jhipster cloudfoundry'
jhcicd='jhipster ci-cd'
jhcompose='jhipster docker-compose'
jhconsuldown='docker-compose -f src/main/docker/consul.yml down'
jhconsullogs='docker-compose -f src/main/docker/consul.yml logs --follow'
jhconsulstop='docker-compose -f src/main/docker/consul.yml stop'
jhconsulup='docker-compose -f src/main/docker/consul.yml up -d'
jhcontroller='jhipster spring-controller'
jhcouchbasedown='docker-compose -f src/main/docker/couchbase.yml down'
jhcouchbaselogs='docker-compose -f src/main/docker/couchbase.yml logs --follow'
jhcouchbasestop='docker-compose -f src/main/docker/couchbase.yml stop'
jhcouchbaseup='docker-compose -f src/main/docker/couchbase.yml up -d'
jhe='jhipster entity'
jhesdown='docker-compose -f src/main/docker/elasticsearch.yml down'
jheslogs='docker-compose -f src/main/docker/elasticsearch.yml logs --follow'
jhesstop='docker-compose -f src/main/docker/elasticsearch.yml stop'
jhesup='docker-compose -f src/main/docker/elasticsearch.yml up -d'
jhf='jhipster --force'
jhfe='jhipster --force --with-entities'
jhheroku='jhipster heroku'
jhinfo='jhipster info'
jhjdl='jhipster import-jdl'
jhkafkadown='docker-compose -f src/main/docker/kafka.yml down'
jhkafkalogs='docker-compose -f src/main/docker/kafka.yml logs --follow'
jhkafkastop='docker-compose -f src/main/docker/kafka.yml stop'
jhkafkaup='docker-compose -f src/main/docker/kafka.yml up -d'
jhkeycloakdown='docker-compose -f src/main/docker/keycloak.yml down'
jhkeycloaklogs='docker-compose -f src/main/docker/keycloak.yml logs --follow'
jhkeycloakstop='docker-compose -f src/main/docker/keycloak.yml stop'
jhkeycloakup='docker-compose -f src/main/docker/keycloak.yml up -d'
jhkot='jhipster --blueprint kotlin'
jhkubernetes='jhipster kubernetes'
jhlang='jhipster languages'
jhlink='npm link generator-jhipster'
jhmariadown='docker-compose -f src/main/docker/mariadb.yml down'
jhmarialogs='docker-compose -f src/main/docker/mariadb.yml logs --follow'
jhmariastop='docker-compose -f src/main/docker/mariadb.yml stop'
jhmariaup='docker-compose -f src/main/docker/mariadb.yml up -d'
jhmongodown='docker-compose -f src/main/docker/mongodb.yml down'
jhmongologs='docker-compose -f src/main/docker/mongodb.yml logs --follow'
jhmongostop='docker-compose -f src/main/docker/mongodb.yml stop'
jhmongoup='docker-compose -f src/main/docker/mongodb.yml up -d'
jhmysqldown='docker-compose -f src/main/docker/mysql.yml down'
jhmysqllogs='docker-compose -f src/main/docker/mysql.yml logs --follow'
jhmysqlstop='docker-compose -f src/main/docker/mysql.yml stop'
jhmysqlup='docker-compose -f src/main/docker/mysql.yml up -d'
jhopenshift='jhipster openshift'
jhpostgresqldown='docker-compose -f src/main/docker/postgresql.yml down'
jhpostgresqllogs='docker-compose -f src/main/docker/postgresql.yml logs --follow'
jhpostgresqlstop='docker-compose -f src/main/docker/postgresql.yml stop'
jhpostgresqlup='docker-compose -f src/main/docker/postgresql.yml up -d'
jhregistrydown='docker-compose -f src/main/docker/jhipster-registry.yml down'
jhregistrylogs='docker-compose -f src/main/docker/jhipster-registry.yml logs --follow'
jhregistrystop='docker-compose -f src/main/docker/jhipster-registry.yml stop'
jhregistryup='docker-compose -f src/main/docker/jhipster-registry.yml up -d'
jhs='jhipster service'
jhskip='jhipster --skip-install --skip-checks'
jhsonardown='docker-compose -f src/main/docker/sonar.yml down'
jhsonarlogs='docker-compose -f src/main/docker/sonar.yml logs --follow'
jhsonarstop='docker-compose -f src/main/docker/sonar.yml stop'
jhsonarup='docker-compose -f src/main/docker/sonar.yml up -d'
jhupgrade='jhipster upgrade'
jhvue='jhipster --blueprint vuejs'
jhyarn='jhipster --yarn'
jimweirich=rake
jobs='jobs -l'
k=pkill
ka=killall
kaf='kubectl apply -f'
kca='f(){ kubectl "$@" --all-namespaces;  unset -f f; }; f'
kccc='kubectl config current-context'
kcdc='kubectl config delete-context'
kcgc='kubectl config get-contexts'
kcn='kubectl config set-context $(kubectl config current-context) --namespace'
kcp='kubectl cp'
kcsc='kubectl config set-context'
kcuc='kubectl config use-context'
kdcm='kubectl describe configmap'
kdd='kubectl describe deployment'
kdel='kubectl delete'
kdelcm='kubectl delete configmap'
kdeld='kubectl delete deployment'
kdelf='kubectl delete -f'
kdeli='kubectl delete ingress'
kdelno='kubectl delete node'
kdelns='kubectl delete namespace'
kdelp='kubectl delete pods'
kdelpvc='kubectl delete pvc'
kdels='kubectl delete svc'
kdelsec='kubectl delete secret'
kdelss='kubectl delete statefulset'
kdi='kubectl describe ingress'
kdno='kubectl describe node'
kdns='kubectl describe namespace'
kdp='kubectl describe pods'
kdpvc='kubectl describe pvc'
kds='kubectl describe svc'
kdsec='kubectl describe secret'
kdss='kubectl describe statefulset'
kecm='kubectl edit configmap'
ked='kubectl edit deployment'
kei='kubectl edit ingress'
keno='kubectl edit node'
kens='kubectl edit namespace'
kep='kubectl edit pods'
kepvc='kubectl edit pvc'
kes='kubectl edit svc'
kess='kubectl edit statefulset'
keti='kubectl exec -ti'
kga='kubectl get all'
kgaa='kubectl get all --all-namespaces'
kgcm='kubectl get configmaps'
kgcma='kubectl get configmaps --all-namespaces'
kgd='kubectl get deployment'
kgda='kubectl get deployment --all-namespaces'
kgdw='kgd --watch'
kgdwide='kgd -o wide'
kgi='kubectl get ingress'
kgia='kubectl get ingress --all-namespaces'
kgno='kubectl get nodes'
kgns='kubectl get namespaces'
kgp='kubectl get pods'
kgpa='kubectl get pods --all-namespaces'
kgpl='kgp -l'
kgpvc='kubectl get pvc'
kgpvca='kubectl get pvc --all-namespaces'
kgpvcw='kgpvc --watch'
kgpw='kgp --watch'
kgpwide='kgp -o wide'
kgrs='kubectl get rs'
kgs='kubectl get svc'
kgsa='kubectl get svc --all-namespaces'
kgsec='kubectl get secret'
kgseca='kubectl get secret --all-namespaces'
kgss='kubectl get statefulset'
kgssa='kubectl get statefulset --all-namespaces'
kgssw='kgss --watch'
kgsswide='kgss -o wide'
kgsw='kgs --watch'
kgswide='kgs -o wide'
kl='kubectl logs'
kl1h='kubectl logs --since 1h'
kl1m='kubectl logs --since 1m'
kl1s='kubectl logs --since 1s'
klf='kubectl logs -f'
klf1h='kubectl logs --since 1h -f'
klf1m='kubectl logs --since 1m -f'
klf1s='kubectl logs --since 1s -f'
kpf='kubectl port-forward'
krh='kubectl rollout history'
krsd='kubectl rollout status deployment'
krsss='kubectl rollout status statefulset'
kru='kubectl rollout undo'
ksd='kubectl scale deployment'
ksss='kubectl scale statefulset'
l=clearList
la=clearList
last='grc --colour=on last'
latest-perl='curl -s https://www.perl.org/get.html | perl -wlne '\''if (/perl\-([\d\.]+)\.tar\.gz/) { print $1; exit;}'\'
ll=clearList
lo='tail -n 1000 -F /Users/wizard/.zpwr/local/zpwrLog.txt'
logs='sudo tail -f /var/log/**/*.log | ccze'
lr='grc -c "$HOME/conf.gls" gls -iAlhFR --color=always'
ls='gls --color=tty'
lsa='ls -lah'
m='meteor run'
ma='meteor add'
mad='meteor admin'
make='grc --colour=on make'
map='meteor add-platform'
mapit='execpy mapIt.py'
matr='cmatrix -C blue -abs'
mau='meteor authorized'
mb='meteor build'
mc='meteor create'
mca='meteor configure-android'
mcl='meteor claim'
md='mkdir -p'
mdb='meteor debug'
mde='meteor deploy'
mem='top -o mem'
mg='cd $HOME/RubymineProjects'
mis='meteor install-sdk'
mkdir='mkdir -pv'
ml='meteor list'
mli='meteor login'
mlo='meteor logout'
mlog='meteor logs'
mlp='meteor list-platforms'
mls='meteor list-sites'
mm='meteor mongo'
mount='grc --colour=on -c "$HOME/conf.mount" mount'
mp='meteor publish'
mpa='meteor publish-for-arch'
mpr='meteor publish-release'
mr='meteor remove'
mre='meteor reset'
mrp='meteor remove-platform'
ms='meteor search'
msh='meteor shell'
msw='meteor show'
mt='meteor test-packages'
mtr='grc --colour=on mtr'
mu='meteor update'
mus='cd $HOME/Music'
mvn=mvn-or-mvnw
'mvn!'='mvn -f $(git rev-parse --show-toplevel 2>/dev/null || echo ".")/pom.xml'
mvn-updates='mvn versions:display-dependency-updates'
mvnag='mvn archetype:generate'
mvnboot='mvn spring-boot:run'
mvnc='mvn clean'
mvncd='mvn clean deploy'
mvnce='mvn clean eclipse:clean eclipse:eclipse'
mvnci='mvn clean install'
mvncie='mvn clean install eclipse:eclipse'
mvncini='mvn clean initialize'
mvncist='mvn clean install -DskipTests'
mvncisto='mvn clean install -DskipTests --offline'
mvncom='mvn compile'
mvncp='mvn clean package'
mvnct='mvn clean test'
mvncv='mvn clean verify'
mvncvst='mvn clean verify -DskipTests'
mvnd='mvn deploy'
mvndocs='mvn dependency:resolve -Dclassifier=javadoc'
mvndt='mvn dependency:tree'
mvne='mvn eclipse:eclipse'
mvnjetty='mvn jetty:run'
mvnp='mvn package'
mvns='mvn site'
mvnsrc='mvn dependency:sources'
mvnt='mvn test'
mvntc='mvn tomcat:run'
mvntc7='mvn tomcat7:run'
mw='meteor whoami'
nd='defaults write com.apple.dock autohide-delay -float 100 && defaults write com.apple.dock tilesize -int 1 && killall Dock'
ne='spotify next'
netstat='grc --colour=on netstat'
ngr='sudo service nginx restart'
ngt='sudo nginx -t'
nmap_check_for_firewall='sudo nmap -sA -p1-65535 -v -T4'
nmap_check_for_vulns='nmap --script=vuln'
nmap_detect_versions='sudo nmap -sV -p1-65535 -O --osscan-guess -T4 -Pn'
nmap_fast='nmap -F -T5 --version-light --top-ports 300'
nmap_fin='sudo nmap -sF -v'
nmap_full='sudo nmap -sS -T4 -PE -PP -PS80,443 -PY -g 53 -A -p1-65535 -v'
nmap_full_udp='sudo nmap -sS -sU -T4 -A -v -PE -PS22,25,80 -PA21,23,80,443,3389 '
nmap_full_with_scripts='sudo nmap -sS -sU -T4 -A -v -PE -PP -PS21,22,23,25,80,113,31339 -PA80,113,443,10042 -PO --script all '
nmap_list_interfaces='nmap --iflist'
nmap_open_ports='nmap --open'
nmap_ping_through_firewall='nmap -PS -PA'
nmap_slow='sudo nmap -sS -v -T1'
nmap_traceroute='sudo nmap -sP -PE -PS22,25,80 -PA21,23,80,3389 -PU -PO --traceroute '
nmap_web_safe_osscan='sudo nmap -p 80,443 -O -v --osscan-guess --fuzzy '
npmD='npm i -D '
npmE='PATH="$(npm bin)":"$PATH"'
npmI='npm init'
npmL='npm list'
npmL0='npm ls --depth=0'
npmO='npm outdated'
npmP='npm publish'
npmR='npm run'
npmS='npm i -S '
npmV='npm -v'
npmg='npm i -g '
npmst='npm start'
npmt='npm test'
nz='exec zsh'
ofd='open_command $PWD'
p2=python2
p3=python3
p_refresh='pio -f -c clion init --ide clion '
pb='execpy bills.py'
pbi='perlbrew install'
pbl='perlbrew list'
pbo='perlbrew off'
pbs='perlbrew switch'
pbu='perlbrew use'
pc=proxychains
pd=perldoc
pe='spotify prev'
pg='cd $HOME/PycharmProjects'
pgrep='pgrep -l'
ping='grc --colour=on ping'
ping6='grc --colour=on ping6'
pip='noglob pip'
pkill='pkill -iIl'
ple='perl -wlne'
please='sudo $(fc -ln -1)'
plr='rlwrap -A -pgreen -S'\''perl> '\'' perl -wnE'\''say eval()//$@'\'
pp=c.pl
ppp='c.pl *'
prodlog='tail -f log/production.log'
ps='grc --colour=on ps'
pw='bash /Users/wizard/.zpwr/scripts/uploadWebPi.sh'
py='cd /Users/wizard/PycharmProjects/fromShell'
pyfind='find . -name "*.py"'
pygrep='grep -r --include="*.py"'
q='qlmanage -p &>/dev/null'
ra='sudo rm -rf --'
rails=_rails_command
rake=_rake_command
rb=ruby
rc='rails console'
rcs='rails console --sandbox'
rd='rails destroy'
rdb='rails dbconsole'
rdc='rake db:create'
rdd='rake db:drop'
rdm='rake db:migrate'
rdms='rake db:migrate:status'
rdmtc='rake db:migrate db:test:clone'
rdr='rake db:rollback'
rdrs='rake db:reset'
rds='rake db:seed'
rdsl='rake db:schema:load'
rdtc='rake db:test:clone'
rdtp='rake db:test:prepare'
re='spotify replay'
reloadpost='pg_ctl reload -D /usr/local/var/postgres -s'
restartpost='stoppost && sleep 1 && startpost'
rfind='find . -name "*.rb" | xargs grep -n'
rgen='rails generate'
rgm='rails generate migration'
rlc='rake log:clear'
rmd='rake middleware'
rn='rake notes'
rp='rails plugin'
rr='rake routes'
rrg='rake routes | grep'
rs='rails server'
rsd='rails server --debugger'
rsp='rails server --port'
rsts='rake stats'
rsync-copy='rsync -avz --progress -h'
rsync-move='rsync -avz --progress -h --remove-source-files'
rsync-synchronize='rsync -avzu --delete --progress -h'
rsync-update='rsync -avzu --progress -h'
rt='rake test'
rtsync=/Users/wizard/Documents/shellScripts/macOnly/rsyncr.sh
ru='rails runner'
run-help=man
sa='sudo cat -n'
sbrake='noglob sudo bundle exec rake'
sc='cd $ZPWR_SCRIPTS'
sd='clear;ssh d '
sf='bash /Users/wizard/.zpwr/scripts/directoryContentsSize.sh'
sg='ruby script/generate'
sgem='sudo gem'
shopt=:
showfiles='defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder'
shutpy='execpy shutdown.py'
sin='./configure && make && sudo make install'
sp='ruby script/plugin'
spa='spotify pause'
spd='du -csh {.[^.]*,..?*} * 2> /dev/null | gsort -h'
sr='ruby script/runner'
srake='noglob sudo rake'
ssp='ruby script/spec'
sst='sudo subl'
sstat='thin --stats "/thin/stats" start'
st=subl
startpost='pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start'
statuspost='pg_ctl status -D /usr/local/var/postgres -s'
stn=create_project
stoppost='pg_ctl -D /usr/local/var/postgres stop -s -m fast'
stp=find_project
stt='subl .'
sudoedit='sudo $EDITOR'
sv='sudo -E nvim'
sy='bash /Users/wizard/.zpwr/scripts/sync.sh'
t='cd /'
ta='tmux attach-session'
tad='tmux attach -d -t'
tclsh='rlwrap tclsh'
testlog='tail -f log/test.log'
tib='tig blame -C'
til='tig log'
tip='top -o +command'
tis='tig status'
tkss='tmux kill-session -t'
tksv='tmux kill-server'
tl='tmux list-sessions'
tm='python3 /Users/wizard/PycharmProjects/fromShell/tmux_starter.py'
tmm='python3 /Users/wizard/PycharmProjects/fromShell/ssh_starter.py'
tmm_full='python3 /Users/wizard/PycharmProjects/fromShell/tabs.py;python3 /Users/wizard/PycharmProjects/fromShell/complete_ssh_starter.py;'
tmm_notabs='python3 /Users/wizard/PycharmProjects/fromShell/complete_ssh_starter.py;'
tmux=_zsh_tmux_plugin_run
tn='tmux new-session'
tra='cd $HOME/.Trash'
traceroute='grc --colour=on traceroute'
traceroute6='grc --colour=on traceroute6'
trc='vim -S ~/.vim/sessions/trc.vim ~/.tmux.conf'
tree='tree -afC'
ts='tmux new-session -s'
u='bash /Users/wizard/.zpwr/scripts/upLoadPi.sh'
u2='bash /Users/wizard/.zpwr/scripts/upLoadPi2.sh'
u8='bash /Users/wizard/.zpwr/scripts/updater.sh'
ud=' execpy udemy.py'
ue='cd /usr/local/etc'
upper='tr '\''a-z'\'' '\''A-Z'\'
v=nvim
v1='open -a '\''vnc viewer'\'';execpy enterPasswordForVNC.py & bash /Users/wizard/.zpwr/scripts/sshTunnelVnc.sh'
v2='open -a '\''vnc viewer'\'';execpy enterPasswordForVNC2.py & bash /Users/wizard/.zpwr/scripts/sshTunnelVnc2.sh'
va='cd /var'
vi=nvim
vim=nvim
vm='nvim -v -u /Users/wizard/.zpwr/.minvimrc'
vrc='vim -S ~/.vim/sessions/vrc.vim ~/.vimrc'
watchGit='bash $ZPWR_SCRIPTS/watchServiceFSWatchGit.sh'
watchPiWeb='bash $ZPWR_SCRIPTS/watchServiceFSWatchPiWeb.sh'
we='cd /usr/local/var/www'
wg='cd $HOME/WebstormProjects'
which-command=whence
whois='grc --colour=on whois'
xg='cd $HOME/Documents/xcode'
y=yarn
ya='yarn add'
yad='yarn add --dev'
yap='yarn add --peer'
yb='yarn build'
ycc='yarn cache clean'
yd='yarn dev'
yga='yarn global add'
ygls='yarn global list'
ygrm='yarn global remove'
ygu='yarn global upgrade'
yh='yarn help'
yi='yarn init'
yin='yarn install'
yln='yarn lint'
yls='yarn list'
yout='yarn outdated'
yp='yarn pack'
yrm='yarn remove'
yrun='yarn run'
ys='yarn serve'
yst='yarn start'
yt='yarn test'
ytc='yarn test --coverage'
yuc='yarn global upgrade && yarn cache clean'
yui='yarn upgrade-interactive'
yup='yarn upgrade'
yv='yarn version'
yw='yarn workspace'
yws='yarn workspaces'
z='zshz 2>&1'
zrc='vim -S ~/.vim/sessions/zshrc.vim + ~/.zshrc; source ~/.zshrc'
